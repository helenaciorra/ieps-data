image: "node:14.18-buster"


.default_rules:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(develop|master)$/ || $CI_COMMIT_BRANCH =~ /^(develop|master)$/'


default:
  interruptible: true


stages:
  - essential
  - lint
  - test
  - build
  - deploy


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/


check_conflict:
  before_script:
    - ''
  stage: essential
  script:
    - (! grep --exclude-dir={node_modules,env,venv} --max-count=1 -lr -E '^<<<<<<< |^=======$|^>>>>>>> ' .)
  rules:
    - !reference [ .default_rules, rules ]


validate_dependencies:
  before_script:
    - ''
  stage: essential
  rules:
    - !reference [ .default_rules, rules ]
  script:
    - npx dependencies-checker@latest


lint:
  stage: lint
  before_script:
    - ''
  script:
    - npm i
    - npm run lint
  rules:
    - !reference [ .default_rules, rules ]



test:
  stage: test
  rules:
    - !reference [ .default_rules, rules ]
  before_script:
    - apt-get update && apt-get install -y gnupg2
    - apt-get install gnupg
    # Install Chrome
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - curl -sS -o - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
    - apt install -y ./google-chrome-stable_current_amd64.deb
    # Install Firefox
    - apt-get install -y firefox-esr
    - apt install chromium-chromedriver
  script:
    - npm i
    - npm run test
  allow_failure: true


build-assets:
  stage: build
  artifacts:
    paths:
      - public/
  script:
    - npm i
    - npm run build
  rules:
    - !reference [ .default_rules, rules ]


sonarqube-check:
  before_script:
    - ''
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: false
  rules:
    - !reference [ .default_rules, rules ]


deploy_staging:
  environment:
    name: staging
  stage: deploy
  script:
    - rm -rf ./.cache
    - rm -rf ./public
    - npm run build
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install awscli
    - aws s3 cp public/ s3://ieps-data-staging/ --recursive --exclude "*" --include "*"
    - aws cloudfront create-invalidation --distribution-id E2ROBJU15YJB9L --paths "/*"
  only:
    - develop


deploy_prod:
  environment:
    name: prod
  stage: deploy
  script:
    - rm -rf ./.cache
    - rm -rf ./public
    - npm run build
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install awscli
    - aws s3 cp public/ s3://ieps-data-prod/ --recursive --exclude "*" --include "*"
    - aws cloudfront create-invalidation --distribution-id E31PPXTQ11MI1W --paths "/*"
  only:
    - master
